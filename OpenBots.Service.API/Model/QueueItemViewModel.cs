/* 
 * OpenBots Server API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = OpenBots.Service.API.Client.SwaggerDateConverter;

namespace OpenBots.Service.API.Model
{
    /// <summary>
    /// QueueItemViewModel
    /// </summary>
    [DataContract]
        public partial class QueueItemViewModel :  IEquatable<QueueItemViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueItemViewModel" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="id">id.</param>
        /// <param name="state">state.</param>
        /// <param name="stateMessage">stateMessage.</param>
        /// <param name="isLocked">isLocked.</param>
        /// <param name="lockedBy">lockedBy.</param>
        /// <param name="lockedOn">lockedOn.</param>
        /// <param name="lockedUntil">lockedUntil.</param>
        /// <param name="lockedEndTime">lockedEndTime.</param>
        public QueueItemViewModel(string name = default(string), Guid? id = default(Guid?), string state = default(string), string stateMessage = default(string), bool? isLocked = default(bool?), Guid? lockedBy = default(Guid?), DateTime? lockedOn = default(DateTime?), DateTime? lockedUntil = default(DateTime?), DateTime? lockedEndTime = default(DateTime?))
        {
            this.Name = name;
            this.Id = id;
            this.State = state;
            this.StateMessage = stateMessage;
            this.IsLocked = isLocked;
            this.LockedBy = lockedBy;
            this.LockedOn = lockedOn;
            this.LockedUntil = lockedUntil;
            this.LockedEndTime = lockedEndTime;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets StateMessage
        /// </summary>
        [DataMember(Name="stateMessage", EmitDefaultValue=false)]
        public string StateMessage { get; set; }

        /// <summary>
        /// Gets or Sets IsLocked
        /// </summary>
        [DataMember(Name="isLocked", EmitDefaultValue=false)]
        public bool? IsLocked { get; set; }

        /// <summary>
        /// Gets or Sets LockedBy
        /// </summary>
        [DataMember(Name="lockedBy", EmitDefaultValue=false)]
        public Guid? LockedBy { get; set; }

        /// <summary>
        /// Gets or Sets LockedOn
        /// </summary>
        [DataMember(Name="lockedOn", EmitDefaultValue=false)]
        public DateTime? LockedOn { get; set; }

        /// <summary>
        /// Gets or Sets LockedUntil
        /// </summary>
        [DataMember(Name="lockedUntil", EmitDefaultValue=false)]
        public DateTime? LockedUntil { get; set; }

        /// <summary>
        /// Gets or Sets LockedEndTime
        /// </summary>
        [DataMember(Name="lockedEndTime", EmitDefaultValue=false)]
        public DateTime? LockedEndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueueItemViewModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateMessage: ").Append(StateMessage).Append("\n");
            sb.Append("  IsLocked: ").Append(IsLocked).Append("\n");
            sb.Append("  LockedBy: ").Append(LockedBy).Append("\n");
            sb.Append("  LockedOn: ").Append(LockedOn).Append("\n");
            sb.Append("  LockedUntil: ").Append(LockedUntil).Append("\n");
            sb.Append("  LockedEndTime: ").Append(LockedEndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueueItemViewModel);
        }

        /// <summary>
        /// Returns true if QueueItemViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of QueueItemViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueueItemViewModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.StateMessage == input.StateMessage ||
                    (this.StateMessage != null &&
                    this.StateMessage.Equals(input.StateMessage))
                ) && 
                (
                    this.IsLocked == input.IsLocked ||
                    (this.IsLocked != null &&
                    this.IsLocked.Equals(input.IsLocked))
                ) && 
                (
                    this.LockedBy == input.LockedBy ||
                    (this.LockedBy != null &&
                    this.LockedBy.Equals(input.LockedBy))
                ) && 
                (
                    this.LockedOn == input.LockedOn ||
                    (this.LockedOn != null &&
                    this.LockedOn.Equals(input.LockedOn))
                ) && 
                (
                    this.LockedUntil == input.LockedUntil ||
                    (this.LockedUntil != null &&
                    this.LockedUntil.Equals(input.LockedUntil))
                ) && 
                (
                    this.LockedEndTime == input.LockedEndTime ||
                    (this.LockedEndTime != null &&
                    this.LockedEndTime.Equals(input.LockedEndTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.StateMessage != null)
                    hashCode = hashCode * 59 + this.StateMessage.GetHashCode();
                if (this.IsLocked != null)
                    hashCode = hashCode * 59 + this.IsLocked.GetHashCode();
                if (this.LockedBy != null)
                    hashCode = hashCode * 59 + this.LockedBy.GetHashCode();
                if (this.LockedOn != null)
                    hashCode = hashCode * 59 + this.LockedOn.GetHashCode();
                if (this.LockedUntil != null)
                    hashCode = hashCode * 59 + this.LockedUntil.GetHashCode();
                if (this.LockedEndTime != null)
                    hashCode = hashCode * 59 + this.LockedEndTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
