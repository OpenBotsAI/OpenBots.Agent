///* 
// * OpenBots Server API
// *
// * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
// *
// * OpenAPI spec version: v1
// * 
// * Generated by: https://github.com/swagger-api/swagger-codegen.git
// */
//using System;
//using System.Collections.Generic;
//using System.Collections.ObjectModel;
//using System.Linq;
//using RestSharp;
//using OpenBots.Service.API.Client;
//using OpenBots.Service.API.Model;

//namespace OpenBots.Service.API.Api
//{
//    /// <summary>
//    /// Represents a collection of functions to interact with the API endpoints
//    /// </summary>
//        public interface IBinaryObjectsApi : IApiAccessor
//    {
//        #region Synchronous Operations
//        /// <summary>
//        /// Provides a list of all BinaryObjects
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="filter"> (optional)</param>
//        /// <param name="orderby"> (optional)</param>
//        /// <param name="top"> (optional, default to 100)</param>
//        /// <param name="skip"> (optional, default to 0)</param>
//        /// <returns>BinaryObjectPaginatedList</returns>
//        BinaryObjectPaginatedList ApiV1BinaryObjectsGet (string filter = null, string orderby = null, int? top = null, int? skip = null);

//        /// <summary>
//        /// Provides a list of all BinaryObjects
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="filter"> (optional)</param>
//        /// <param name="orderby"> (optional)</param>
//        /// <param name="top"> (optional, default to 100)</param>
//        /// <param name="skip"> (optional, default to 0)</param>
//        /// <returns>ApiResponse of BinaryObjectPaginatedList</returns>
//        ApiResponse<BinaryObjectPaginatedList> ApiV1BinaryObjectsGetWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
//        /// <summary>
//        /// Deletes a Binary Object with a specified id from the Binary Objects.
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">Binary Object Id to be deleted - throws BadRequest if null or empty Guid/</param>
//        /// <returns>IActionResult</returns>
//        IActionResult ApiV1BinaryObjectsIdDelete (string id);

//        /// <summary>
//        /// Deletes a Binary Object with a specified id from the Binary Objects.
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">Binary Object Id to be deleted - throws BadRequest if null or empty Guid/</param>
//        /// <returns>ApiResponse of IActionResult</returns>
//        ApiResponse<IActionResult> ApiV1BinaryObjectsIdDeleteWithHttpInfo (string id);
//        /// <summary>
//        /// Export/Download a binary object
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id"></param>
//        /// <param name="binaryObjectId"> (optional)</param>
//        /// <returns>BinaryObjectPaginatedList</returns>
//        BinaryObjectPaginatedList ApiV1BinaryObjectsIdDownloadGet (string id, string binaryObjectId = null);

//        /// <summary>
//        /// Export/Download a binary object
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id"></param>
//        /// <param name="binaryObjectId"> (optional)</param>
//        /// <returns>ApiResponse of BinaryObjectPaginatedList</returns>
//        ApiResponse<BinaryObjectPaginatedList> ApiV1BinaryObjectsIdDownloadGetWithHttpInfo (string id, string binaryObjectId = null);
//        /// <summary>
//        /// Updates partial details of BinaryObject.
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">BinaryObject identifier</param>
//        /// <param name="body">Value of the Binary Object to be updated. (optional)</param>
//        /// <returns>IActionResult</returns>
//        IActionResult ApiV1BinaryObjectsIdPatch (string id, List<Operation> body = null);

//        /// <summary>
//        /// Updates partial details of BinaryObject.
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">BinaryObject identifier</param>
//        /// <param name="body">Value of the Binary Object to be updated. (optional)</param>
//        /// <returns>ApiResponse of IActionResult</returns>
//        ApiResponse<IActionResult> ApiV1BinaryObjectsIdPatchWithHttpInfo (string id, List<Operation> body = null);
//        /// <summary>
//        /// Updates an Binary Object
//        /// </summary>
//        /// <remarks>
//        /// Provides an action to update an Binary Object, when Binary Object id and the new details of Binary Object are given
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">Binary Object Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
//        /// <param name="body">Binary Object details to be updated (optional)</param>
//        /// <returns>IActionResult</returns>
//        IActionResult ApiV1BinaryObjectsIdPut (string id, BinaryObject body = null);

//        /// <summary>
//        /// Updates an Binary Object
//        /// </summary>
//        /// <remarks>
//        /// Provides an action to update an Binary Object, when Binary Object id and the new details of Binary Object are given
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">Binary Object Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
//        /// <param name="body">Binary Object details to be updated (optional)</param>
//        /// <returns>ApiResponse of IActionResult</returns>
//        ApiResponse<IActionResult> ApiV1BinaryObjectsIdPutWithHttpInfo (string id, BinaryObject body = null);
//        /// <summary>
//        /// 
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="apiComponent"> (optional)</param>
//        /// <param name="binaryObjectId"> (optional)</param>
//        /// <param name="organizationId"> (optional)</param>
//        /// <param name="storageProvider"> (optional)</param>
//        /// <param name="name"> (optional)</param>
//        /// <returns>BinaryObject</returns>
//        BinaryObject ApiV1BinaryObjectsSavePost (string apiComponent = null, string binaryObjectId = null, string organizationId = null, string storageProvider = null, string name = null);

//        /// <summary>
//        /// 
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="apiComponent"> (optional)</param>
//        /// <param name="binaryObjectId"> (optional)</param>
//        /// <param name="organizationId"> (optional)</param>
//        /// <param name="storageProvider"> (optional)</param>
//        /// <param name="name"> (optional)</param>
//        /// <returns>ApiResponse of BinaryObject</returns>
//        ApiResponse<BinaryObject> ApiV1BinaryObjectsSavePostWithHttpInfo (string apiComponent = null, string binaryObjectId = null, string organizationId = null, string storageProvider = null, string name = null);
//        /// <summary>
//        /// Uploads/Adds a Binary Object
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="organizationId"> (optional)</param>
//        /// <param name="apiComponent"> (optional)</param>
//        /// <returns></returns>
//        void ApiV1BinaryObjectsUploadPost (string organizationId = null, string apiComponent = null);

//        /// <summary>
//        /// Uploads/Adds a Binary Object
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="organizationId"> (optional)</param>
//        /// <param name="apiComponent"> (optional)</param>
//        /// <returns>ApiResponse of Object(void)</returns>
//        ApiResponse<Object> ApiV1BinaryObjectsUploadPostWithHttpInfo (string organizationId = null, string apiComponent = null);
//        /// <summary>
//        /// Provides an BinaryObject details for a particular BinaryObject Id.
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">BinaryObject id</param>
//        /// <returns>BinaryObjectPaginatedList</returns>
//        BinaryObjectPaginatedList GetBinaryObject (string id);

//        /// <summary>
//        /// Provides an BinaryObject details for a particular BinaryObject Id.
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">BinaryObject id</param>
//        /// <returns>ApiResponse of BinaryObjectPaginatedList</returns>
//        ApiResponse<BinaryObjectPaginatedList> GetBinaryObjectWithHttpInfo (string id);
//        #endregion Synchronous Operations
//        #region Asynchronous Operations
//        /// <summary>
//        /// Provides a list of all BinaryObjects
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="filter"> (optional)</param>
//        /// <param name="orderby"> (optional)</param>
//        /// <param name="top"> (optional, default to 100)</param>
//        /// <param name="skip"> (optional, default to 0)</param>
//        /// <returns>Task of BinaryObjectPaginatedList</returns>
//        System.Threading.Tasks.Task<BinaryObjectPaginatedList> ApiV1BinaryObjectsGetAsync (string filter = null, string orderby = null, int? top = null, int? skip = null);

//        /// <summary>
//        /// Provides a list of all BinaryObjects
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="filter"> (optional)</param>
//        /// <param name="orderby"> (optional)</param>
//        /// <param name="top"> (optional, default to 100)</param>
//        /// <param name="skip"> (optional, default to 0)</param>
//        /// <returns>Task of ApiResponse (BinaryObjectPaginatedList)</returns>
//        System.Threading.Tasks.Task<ApiResponse<BinaryObjectPaginatedList>> ApiV1BinaryObjectsGetAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
//        /// <summary>
//        /// Deletes a Binary Object with a specified id from the Binary Objects.
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">Binary Object Id to be deleted - throws BadRequest if null or empty Guid/</param>
//        /// <returns>Task of IActionResult</returns>
//        System.Threading.Tasks.Task<IActionResult> ApiV1BinaryObjectsIdDeleteAsync (string id);

//        /// <summary>
//        /// Deletes a Binary Object with a specified id from the Binary Objects.
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">Binary Object Id to be deleted - throws BadRequest if null or empty Guid/</param>
//        /// <returns>Task of ApiResponse (IActionResult)</returns>
//        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1BinaryObjectsIdDeleteAsyncWithHttpInfo (string id);
//        /// <summary>
//        /// Export/Download a binary object
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id"></param>
//        /// <param name="binaryObjectId"> (optional)</param>
//        /// <returns>Task of BinaryObjectPaginatedList</returns>
//        System.Threading.Tasks.Task<BinaryObjectPaginatedList> ApiV1BinaryObjectsIdDownloadGetAsync (string id, string binaryObjectId = null);

//        /// <summary>
//        /// Export/Download a binary object
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id"></param>
//        /// <param name="binaryObjectId"> (optional)</param>
//        /// <returns>Task of ApiResponse (BinaryObjectPaginatedList)</returns>
//        System.Threading.Tasks.Task<ApiResponse<BinaryObjectPaginatedList>> ApiV1BinaryObjectsIdDownloadGetAsyncWithHttpInfo (string id, string binaryObjectId = null);
//        /// <summary>
//        /// Updates partial details of BinaryObject.
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">BinaryObject identifier</param>
//        /// <param name="body">Value of the Binary Object to be updated. (optional)</param>
//        /// <returns>Task of IActionResult</returns>
//        System.Threading.Tasks.Task<IActionResult> ApiV1BinaryObjectsIdPatchAsync (string id, List<Operation> body = null);

//        /// <summary>
//        /// Updates partial details of BinaryObject.
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">BinaryObject identifier</param>
//        /// <param name="body">Value of the Binary Object to be updated. (optional)</param>
//        /// <returns>Task of ApiResponse (IActionResult)</returns>
//        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1BinaryObjectsIdPatchAsyncWithHttpInfo (string id, List<Operation> body = null);
//        /// <summary>
//        /// Updates an Binary Object
//        /// </summary>
//        /// <remarks>
//        /// Provides an action to update an Binary Object, when Binary Object id and the new details of Binary Object are given
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">Binary Object Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
//        /// <param name="body">Binary Object details to be updated (optional)</param>
//        /// <returns>Task of IActionResult</returns>
//        System.Threading.Tasks.Task<IActionResult> ApiV1BinaryObjectsIdPutAsync (string id, BinaryObject body = null);

//        /// <summary>
//        /// Updates an Binary Object
//        /// </summary>
//        /// <remarks>
//        /// Provides an action to update an Binary Object, when Binary Object id and the new details of Binary Object are given
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">Binary Object Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
//        /// <param name="body">Binary Object details to be updated (optional)</param>
//        /// <returns>Task of ApiResponse (IActionResult)</returns>
//        System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1BinaryObjectsIdPutAsyncWithHttpInfo (string id, BinaryObject body = null);
//        /// <summary>
//        /// 
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="apiComponent"> (optional)</param>
//        /// <param name="binaryObjectId"> (optional)</param>
//        /// <param name="organizationId"> (optional)</param>
//        /// <param name="storageProvider"> (optional)</param>
//        /// <param name="name"> (optional)</param>
//        /// <returns>Task of BinaryObject</returns>
//        System.Threading.Tasks.Task<BinaryObject> ApiV1BinaryObjectsSavePostAsync (string apiComponent = null, string binaryObjectId = null, string organizationId = null, string storageProvider = null, string name = null);

//        /// <summary>
//        /// 
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="apiComponent"> (optional)</param>
//        /// <param name="binaryObjectId"> (optional)</param>
//        /// <param name="organizationId"> (optional)</param>
//        /// <param name="storageProvider"> (optional)</param>
//        /// <param name="name"> (optional)</param>
//        /// <returns>Task of ApiResponse (BinaryObject)</returns>
//        System.Threading.Tasks.Task<ApiResponse<BinaryObject>> ApiV1BinaryObjectsSavePostAsyncWithHttpInfo (string apiComponent = null, string binaryObjectId = null, string organizationId = null, string storageProvider = null, string name = null);
//        /// <summary>
//        /// Uploads/Adds a Binary Object
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="organizationId"> (optional)</param>
//        /// <param name="apiComponent"> (optional)</param>
//        /// <returns>Task of void</returns>
//        System.Threading.Tasks.Task ApiV1BinaryObjectsUploadPostAsync (string organizationId = null, string apiComponent = null);

//        /// <summary>
//        /// Uploads/Adds a Binary Object
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="organizationId"> (optional)</param>
//        /// <param name="apiComponent"> (optional)</param>
//        /// <returns>Task of ApiResponse</returns>
//        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1BinaryObjectsUploadPostAsyncWithHttpInfo (string organizationId = null, string apiComponent = null);
//        /// <summary>
//        /// Provides an BinaryObject details for a particular BinaryObject Id.
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">BinaryObject id</param>
//        /// <returns>Task of BinaryObjectPaginatedList</returns>
//        System.Threading.Tasks.Task<BinaryObjectPaginatedList> GetBinaryObjectAsync (string id);

//        /// <summary>
//        /// Provides an BinaryObject details for a particular BinaryObject Id.
//        /// </summary>
//        /// <remarks>
//        /// 
//        /// </remarks>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">BinaryObject id</param>
//        /// <returns>Task of ApiResponse (BinaryObjectPaginatedList)</returns>
//        System.Threading.Tasks.Task<ApiResponse<BinaryObjectPaginatedList>> GetBinaryObjectAsyncWithHttpInfo (string id);
//        #endregion Asynchronous Operations
//    }

//    /// <summary>
//    /// Represents a collection of functions to interact with the API endpoints
//    /// </summary>
//        public partial class BinaryObjectsApi : IBinaryObjectsApi
//    {
//        private OpenBots.Service.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

//        /// <summary>
//        /// Initializes a new instance of the <see cref="BinaryObjectsApi"/> class.
//        /// </summary>
//        /// <returns></returns>
//        public BinaryObjectsApi(String basePath)
//        {
//            this.Configuration = new OpenBots.Service.API.Client.Configuration { BasePath = basePath };

//            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
//        }

//        /// <summary>
//        /// Initializes a new instance of the <see cref="BinaryObjectsApi"/> class
//        /// </summary>
//        /// <returns></returns>
//        public BinaryObjectsApi()
//        {
//            this.Configuration = OpenBots.Service.API.Client.Configuration.Default;

//            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
//        }

//        /// <summary>
//        /// Initializes a new instance of the <see cref="BinaryObjectsApi"/> class
//        /// using Configuration object
//        /// </summary>
//        /// <param name="configuration">An instance of Configuration</param>
//        /// <returns></returns>
//        public BinaryObjectsApi(OpenBots.Service.API.Client.Configuration configuration = null)
//        {
//            if (configuration == null) // use the default one in Configuration
//                this.Configuration = OpenBots.Service.API.Client.Configuration.Default;
//            else
//                this.Configuration = configuration;

//            ExceptionFactory = OpenBots.Service.API.Client.Configuration.DefaultExceptionFactory;
//        }

//        /// <summary>
//        /// Gets the base path of the API client.
//        /// </summary>
//        /// <value>The base path</value>
//        public String GetBasePath()
//        {
//            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
//        }

//        /// <summary>
//        /// Sets the base path of the API client.
//        /// </summary>
//        /// <value>The base path</value>
//        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
//        public void SetBasePath(String basePath)
//        {
//            // do nothing
//        }

//        /// <summary>
//        /// Gets or sets the configuration object
//        /// </summary>
//        /// <value>An instance of the Configuration</value>
//        public OpenBots.Service.API.Client.Configuration Configuration {get; set;}

//        /// <summary>
//        /// Provides a factory method hook for the creation of exceptions.
//        /// </summary>
//        public OpenBots.Service.API.Client.ExceptionFactory ExceptionFactory
//        {
//            get
//            {
//                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
//                {
//                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
//                }
//                return _exceptionFactory;
//            }
//            set { _exceptionFactory = value; }
//        }

//        /// <summary>
//        /// Gets the default header.
//        /// </summary>
//        /// <returns>Dictionary of HTTP header</returns>
//        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
//        public IDictionary<String, String> DefaultHeader()
//        {
//            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
//        }

//        /// <summary>
//        /// Add default header.
//        /// </summary>
//        /// <param name="key">Header field name.</param>
//        /// <param name="value">Header field value.</param>
//        /// <returns></returns>
//        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
//        public void AddDefaultHeader(string key, string value)
//        {
//            this.Configuration.AddDefaultHeader(key, value);
//        }

//        /// <summary>
//        /// Provides a list of all BinaryObjects 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="filter"> (optional)</param>
//        /// <param name="orderby"> (optional)</param>
//        /// <param name="top"> (optional, default to 100)</param>
//        /// <param name="skip"> (optional, default to 0)</param>
//        /// <returns>BinaryObjectPaginatedList</returns>
//        public BinaryObjectPaginatedList ApiV1BinaryObjectsGet (string filter = null, string orderby = null, int? top = null, int? skip = null)
//        {
//             ApiResponse<BinaryObjectPaginatedList> localVarResponse = ApiV1BinaryObjectsGetWithHttpInfo(filter, orderby, top, skip);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Provides a list of all BinaryObjects 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="filter"> (optional)</param>
//        /// <param name="orderby"> (optional)</param>
//        /// <param name="top"> (optional, default to 100)</param>
//        /// <param name="skip"> (optional, default to 0)</param>
//        /// <returns>ApiResponse of BinaryObjectPaginatedList</returns>
//        public ApiResponse< BinaryObjectPaginatedList > ApiV1BinaryObjectsGetWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
//        {

//            var localVarPath = "/api/v1/BinaryObjects";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
//            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
//            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
//            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("ApiV1BinaryObjectsGet", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<BinaryObjectPaginatedList>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
//                (BinaryObjectPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinaryObjectPaginatedList)));
//        }

//        /// <summary>
//        /// Provides a list of all BinaryObjects 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="filter"> (optional)</param>
//        /// <param name="orderby"> (optional)</param>
//        /// <param name="top"> (optional, default to 100)</param>
//        /// <param name="skip"> (optional, default to 0)</param>
//        /// <returns>Task of BinaryObjectPaginatedList</returns>
//        public async System.Threading.Tasks.Task<BinaryObjectPaginatedList> ApiV1BinaryObjectsGetAsync (string filter = null, string orderby = null, int? top = null, int? skip = null)
//        {
//             ApiResponse<BinaryObjectPaginatedList> localVarResponse = await ApiV1BinaryObjectsGetAsyncWithHttpInfo(filter, orderby, top, skip);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Provides a list of all BinaryObjects 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="filter"> (optional)</param>
//        /// <param name="orderby"> (optional)</param>
//        /// <param name="top"> (optional, default to 100)</param>
//        /// <param name="skip"> (optional, default to 0)</param>
//        /// <returns>Task of ApiResponse (BinaryObjectPaginatedList)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<BinaryObjectPaginatedList>> ApiV1BinaryObjectsGetAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
//        {

//            var localVarPath = "/api/v1/BinaryObjects";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
//            if (orderby != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
//            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
//            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("ApiV1BinaryObjectsGet", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<BinaryObjectPaginatedList>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
//                (BinaryObjectPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinaryObjectPaginatedList)));
//        }

//        /// <summary>
//        /// Deletes a Binary Object with a specified id from the Binary Objects. 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">Binary Object Id to be deleted - throws BadRequest if null or empty Guid/</param>
//        /// <returns>IActionResult</returns>
//        public IActionResult ApiV1BinaryObjectsIdDelete (string id)
//        {
//             ApiResponse<IActionResult> localVarResponse = ApiV1BinaryObjectsIdDeleteWithHttpInfo(id);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Deletes a Binary Object with a specified id from the Binary Objects. 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">Binary Object Id to be deleted - throws BadRequest if null or empty Guid/</param>
//        /// <returns>ApiResponse of IActionResult</returns>
//        public ApiResponse< IActionResult > ApiV1BinaryObjectsIdDeleteWithHttpInfo (string id)
//        {
//            // verify the required parameter 'id' is set
//            if (id == null)
//                throw new ApiException(400, "Missing required parameter 'id' when calling BinaryObjectsApi->ApiV1BinaryObjectsIdDelete");

//            var localVarPath = "/api/v1/BinaryObjects/{id}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
//                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("ApiV1BinaryObjectsIdDelete", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<IActionResult>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
//                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
//        }

//        /// <summary>
//        /// Deletes a Binary Object with a specified id from the Binary Objects. 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">Binary Object Id to be deleted - throws BadRequest if null or empty Guid/</param>
//        /// <returns>Task of IActionResult</returns>
//        public async System.Threading.Tasks.Task<IActionResult> ApiV1BinaryObjectsIdDeleteAsync (string id)
//        {
//             ApiResponse<IActionResult> localVarResponse = await ApiV1BinaryObjectsIdDeleteAsyncWithHttpInfo(id);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Deletes a Binary Object with a specified id from the Binary Objects. 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">Binary Object Id to be deleted - throws BadRequest if null or empty Guid/</param>
//        /// <returns>Task of ApiResponse (IActionResult)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1BinaryObjectsIdDeleteAsyncWithHttpInfo (string id)
//        {
//            // verify the required parameter 'id' is set
//            if (id == null)
//                throw new ApiException(400, "Missing required parameter 'id' when calling BinaryObjectsApi->ApiV1BinaryObjectsIdDelete");

//            var localVarPath = "/api/v1/BinaryObjects/{id}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("ApiV1BinaryObjectsIdDelete", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<IActionResult>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
//                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
//        }

//        /// <summary>
//        /// Export/Download a binary object 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id"></param>
//        /// <param name="binaryObjectId"> (optional)</param>
//        /// <returns>BinaryObjectPaginatedList</returns>
//        public BinaryObjectPaginatedList ApiV1BinaryObjectsIdDownloadGet (string id, string binaryObjectId = null)
//        {
//             ApiResponse<BinaryObjectPaginatedList> localVarResponse = ApiV1BinaryObjectsIdDownloadGetWithHttpInfo(id, binaryObjectId);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Export/Download a binary object 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id"></param>
//        /// <param name="binaryObjectId"> (optional)</param>
//        /// <returns>ApiResponse of BinaryObjectPaginatedList</returns>
//        public ApiResponse< BinaryObjectPaginatedList > ApiV1BinaryObjectsIdDownloadGetWithHttpInfo (string id, string binaryObjectId = null)
//        {
//            // verify the required parameter 'id' is set
//            if (id == null)
//                throw new ApiException(400, "Missing required parameter 'id' when calling BinaryObjectsApi->ApiV1BinaryObjectsIdDownloadGet");

//            var localVarPath = "/api/v1/BinaryObjects/{id}/download";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "text/plain",
//                "application/json",
//                "text/json"
//            };
//            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
//            if (binaryObjectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "binaryObjectId", binaryObjectId)); // query parameter

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("ApiV1BinaryObjectsIdDownloadGet", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<BinaryObjectPaginatedList>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
//                (BinaryObjectPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinaryObjectPaginatedList)));
//        }

//        /// <summary>
//        /// Export/Download a binary object 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id"></param>
//        /// <param name="binaryObjectId"> (optional)</param>
//        /// <returns>Task of BinaryObjectPaginatedList</returns>
//        public async System.Threading.Tasks.Task<BinaryObjectPaginatedList> ApiV1BinaryObjectsIdDownloadGetAsync (string id, string binaryObjectId = null)
//        {
//             ApiResponse<BinaryObjectPaginatedList> localVarResponse = await ApiV1BinaryObjectsIdDownloadGetAsyncWithHttpInfo(id, binaryObjectId);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Export/Download a binary object 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id"></param>
//        /// <param name="binaryObjectId"> (optional)</param>
//        /// <returns>Task of ApiResponse (BinaryObjectPaginatedList)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<BinaryObjectPaginatedList>> ApiV1BinaryObjectsIdDownloadGetAsyncWithHttpInfo (string id, string binaryObjectId = null)
//        {
//            // verify the required parameter 'id' is set
//            if (id == null)
//                throw new ApiException(400, "Missing required parameter 'id' when calling BinaryObjectsApi->ApiV1BinaryObjectsIdDownloadGet");

//            var localVarPath = "/api/v1/BinaryObjects/{id}/download";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "text/plain",
//                "application/json",
//                "text/json"
//            };
//            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
//            if (binaryObjectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "binaryObjectId", binaryObjectId)); // query parameter

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("ApiV1BinaryObjectsIdDownloadGet", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<BinaryObjectPaginatedList>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
//                (BinaryObjectPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinaryObjectPaginatedList)));
//        }

//        /// <summary>
//        /// Updates partial details of BinaryObject. 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">BinaryObject identifier</param>
//        /// <param name="body">Value of the Binary Object to be updated. (optional)</param>
//        /// <returns>IActionResult</returns>
//        public IActionResult ApiV1BinaryObjectsIdPatch (string id, List<Operation> body = null)
//        {
//             ApiResponse<IActionResult> localVarResponse = ApiV1BinaryObjectsIdPatchWithHttpInfo(id, body);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Updates partial details of BinaryObject. 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">BinaryObject identifier</param>
//        /// <param name="body">Value of the Binary Object to be updated. (optional)</param>
//        /// <returns>ApiResponse of IActionResult</returns>
//        public ApiResponse< IActionResult > ApiV1BinaryObjectsIdPatchWithHttpInfo (string id, List<Operation> body = null)
//        {
//            // verify the required parameter 'id' is set
//            if (id == null)
//                throw new ApiException(400, "Missing required parameter 'id' when calling BinaryObjectsApi->ApiV1BinaryObjectsIdPatch");

//            var localVarPath = "/api/v1/BinaryObjects/{id}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//                "application/json-patch+json", 
//                "application/json", 
//                "text/json", 
//                "application/_*+json"
//            };
//            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
//            if (body != null && body.GetType() != typeof(byte[]))
//            {
//                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
//            }
//            else
//            {
//                localVarPostBody = body; // byte array
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
//                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("ApiV1BinaryObjectsIdPatch", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<IActionResult>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
//                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
//        }

//        /// <summary>
//        /// Updates partial details of BinaryObject. 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">BinaryObject identifier</param>
//        /// <param name="body">Value of the Binary Object to be updated. (optional)</param>
//        /// <returns>Task of IActionResult</returns>
//        public async System.Threading.Tasks.Task<IActionResult> ApiV1BinaryObjectsIdPatchAsync (string id, List<Operation> body = null)
//        {
//             ApiResponse<IActionResult> localVarResponse = await ApiV1BinaryObjectsIdPatchAsyncWithHttpInfo(id, body);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Updates partial details of BinaryObject. 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">BinaryObject identifier</param>
//        /// <param name="body">Value of the Binary Object to be updated. (optional)</param>
//        /// <returns>Task of ApiResponse (IActionResult)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1BinaryObjectsIdPatchAsyncWithHttpInfo (string id, List<Operation> body = null)
//        {
//            // verify the required parameter 'id' is set
//            if (id == null)
//                throw new ApiException(400, "Missing required parameter 'id' when calling BinaryObjectsApi->ApiV1BinaryObjectsIdPatch");

//            var localVarPath = "/api/v1/BinaryObjects/{id}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//                "application/json-patch+json", 
//                "application/json", 
//                "text/json", 
//                "application/_*+json"
//            };
//            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
//            if (body != null && body.GetType() != typeof(byte[]))
//            {
//                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
//            }
//            else
//            {
//                localVarPostBody = body; // byte array
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("ApiV1BinaryObjectsIdPatch", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<IActionResult>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
//                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
//        }

//        /// <summary>
//        /// Updates an Binary Object Provides an action to update an Binary Object, when Binary Object id and the new details of Binary Object are given
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">Binary Object Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
//        /// <param name="body">Binary Object details to be updated (optional)</param>
//        /// <returns>IActionResult</returns>
//        public IActionResult ApiV1BinaryObjectsIdPut (string id, BinaryObject body = null)
//        {
//             ApiResponse<IActionResult> localVarResponse = ApiV1BinaryObjectsIdPutWithHttpInfo(id, body);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Updates an Binary Object Provides an action to update an Binary Object, when Binary Object id and the new details of Binary Object are given
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">Binary Object Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
//        /// <param name="body">Binary Object details to be updated (optional)</param>
//        /// <returns>ApiResponse of IActionResult</returns>
//        public ApiResponse< IActionResult > ApiV1BinaryObjectsIdPutWithHttpInfo (string id, BinaryObject body = null)
//        {
//            // verify the required parameter 'id' is set
//            if (id == null)
//                throw new ApiException(400, "Missing required parameter 'id' when calling BinaryObjectsApi->ApiV1BinaryObjectsIdPut");

//            var localVarPath = "/api/v1/BinaryObjects/{id}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//                "application/json-patch+json", 
//                "application/json", 
//                "text/json", 
//                "application/_*+json"
//            };
//            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
//            if (body != null && body.GetType() != typeof(byte[]))
//            {
//                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
//            }
//            else
//            {
//                localVarPostBody = body; // byte array
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
//                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("ApiV1BinaryObjectsIdPut", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<IActionResult>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
//                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
//        }

//        /// <summary>
//        /// Updates an Binary Object Provides an action to update an Binary Object, when Binary Object id and the new details of Binary Object are given
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">Binary Object Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
//        /// <param name="body">Binary Object details to be updated (optional)</param>
//        /// <returns>Task of IActionResult</returns>
//        public async System.Threading.Tasks.Task<IActionResult> ApiV1BinaryObjectsIdPutAsync (string id, BinaryObject body = null)
//        {
//             ApiResponse<IActionResult> localVarResponse = await ApiV1BinaryObjectsIdPutAsyncWithHttpInfo(id, body);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Updates an Binary Object Provides an action to update an Binary Object, when Binary Object id and the new details of Binary Object are given
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">Binary Object Id,produces Bad request if Id is null or Id&#x27;s don&#x27;t match</param>
//        /// <param name="body">Binary Object details to be updated (optional)</param>
//        /// <returns>Task of ApiResponse (IActionResult)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<IActionResult>> ApiV1BinaryObjectsIdPutAsyncWithHttpInfo (string id, BinaryObject body = null)
//        {
//            // verify the required parameter 'id' is set
//            if (id == null)
//                throw new ApiException(400, "Missing required parameter 'id' when calling BinaryObjectsApi->ApiV1BinaryObjectsIdPut");

//            var localVarPath = "/api/v1/BinaryObjects/{id}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//                "application/json-patch+json", 
//                "application/json", 
//                "text/json", 
//                "application/_*+json"
//            };
//            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
//            if (body != null && body.GetType() != typeof(byte[]))
//            {
//                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
//            }
//            else
//            {
//                localVarPostBody = body; // byte array
//            }

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("ApiV1BinaryObjectsIdPut", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<IActionResult>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
//                (IActionResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IActionResult)));
//        }

//        /// <summary>
//        ///  
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="apiComponent"> (optional)</param>
//        /// <param name="binaryObjectId"> (optional)</param>
//        /// <param name="organizationId"> (optional)</param>
//        /// <param name="storageProvider"> (optional)</param>
//        /// <param name="name"> (optional)</param>
//        /// <returns>BinaryObject</returns>
//        public BinaryObject ApiV1BinaryObjectsSavePost (string apiComponent = null, string binaryObjectId = null, string organizationId = null, string storageProvider = null, string name = null)
//        {
//             ApiResponse<BinaryObject> localVarResponse = ApiV1BinaryObjectsSavePostWithHttpInfo(apiComponent, binaryObjectId, organizationId, storageProvider, name);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        ///  
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="apiComponent"> (optional)</param>
//        /// <param name="binaryObjectId"> (optional)</param>
//        /// <param name="organizationId"> (optional)</param>
//        /// <param name="storageProvider"> (optional)</param>
//        /// <param name="name"> (optional)</param>
//        /// <returns>ApiResponse of BinaryObject</returns>
//        public ApiResponse< BinaryObject > ApiV1BinaryObjectsSavePostWithHttpInfo (string apiComponent = null, string binaryObjectId = null, string organizationId = null, string storageProvider = null, string name = null)
//        {

//            var localVarPath = "/api/v1/BinaryObjects/save";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//                "multipart/form-data"
//            };
//            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (apiComponent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiComponent", apiComponent)); // query parameter
//            if (binaryObjectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "binaryObjectId", binaryObjectId)); // query parameter
//            if (organizationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter
//            if (storageProvider != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storageProvider", storageProvider)); // query parameter
//            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
//            if (contentType != null) localVarFormParams.Add("ContentType", this.Configuration.ApiClient.ParameterToString(contentType)); // form parameter
//            if (contentDisposition != null) localVarFormParams.Add("ContentDisposition", this.Configuration.ApiClient.ParameterToString(contentDisposition)); // form parameter
//            if (headers != null) localVarFormParams.Add("Headers", this.Configuration.ApiClient.ParameterToString(headers)); // form parameter
//            if (length != null) localVarFormParams.Add("Length", this.Configuration.ApiClient.ParameterToString(length)); // form parameter
//            if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
//            if (fileName != null) localVarFormParams.Add("FileName", this.Configuration.ApiClient.ParameterToString(fileName)); // form parameter

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
//                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("ApiV1BinaryObjectsSavePost", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<BinaryObject>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
//                (BinaryObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinaryObject)));
//        }

//        /// <summary>
//        ///  
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="apiComponent"> (optional)</param>
//        /// <param name="binaryObjectId"> (optional)</param>
//        /// <param name="organizationId"> (optional)</param>
//        /// <param name="storageProvider"> (optional)</param>
//        /// <param name="name"> (optional)</param>
//        /// <returns>Task of BinaryObject</returns>
//        public async System.Threading.Tasks.Task<BinaryObject> ApiV1BinaryObjectsSavePostAsync (string apiComponent = null, string binaryObjectId = null, string organizationId = null, string storageProvider = null, string name = null)
//        {
//             ApiResponse<BinaryObject> localVarResponse = await ApiV1BinaryObjectsSavePostAsyncWithHttpInfo(apiComponent, binaryObjectId, organizationId, storageProvider, name);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        ///  
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="apiComponent"> (optional)</param>
//        /// <param name="binaryObjectId"> (optional)</param>
//        /// <param name="organizationId"> (optional)</param>
//        /// <param name="storageProvider"> (optional)</param>
//        /// <param name="name"> (optional)</param>
//        /// <returns>Task of ApiResponse (BinaryObject)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<BinaryObject>> ApiV1BinaryObjectsSavePostAsyncWithHttpInfo (string apiComponent = null, string binaryObjectId = null, string organizationId = null, string storageProvider = null, string name = null)
//        {

//            var localVarPath = "/api/v1/BinaryObjects/save";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//                "multipart/form-data"
//            };
//            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (apiComponent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiComponent", apiComponent)); // query parameter
//            if (binaryObjectId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "binaryObjectId", binaryObjectId)); // query parameter
//            if (organizationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter
//            if (storageProvider != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "storageProvider", storageProvider)); // query parameter
//            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
//            if (contentType != null) localVarFormParams.Add("ContentType", this.Configuration.ApiClient.ParameterToString(contentType)); // form parameter
//            if (contentDisposition != null) localVarFormParams.Add("ContentDisposition", this.Configuration.ApiClient.ParameterToString(contentDisposition)); // form parameter
//            if (headers != null) localVarFormParams.Add("Headers", this.Configuration.ApiClient.ParameterToString(headers)); // form parameter
//            if (length != null) localVarFormParams.Add("Length", this.Configuration.ApiClient.ParameterToString(length)); // form parameter
//            if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
//            if (fileName != null) localVarFormParams.Add("FileName", this.Configuration.ApiClient.ParameterToString(fileName)); // form parameter

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("ApiV1BinaryObjectsSavePost", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<BinaryObject>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
//                (BinaryObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinaryObject)));
//        }

//        /// <summary>
//        /// Uploads/Adds a Binary Object 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="organizationId"> (optional)</param>
//        /// <param name="apiComponent"> (optional)</param>
//        /// <returns></returns>
//        public void ApiV1BinaryObjectsUploadPost (string organizationId = null, string apiComponent = null)
//        {
//             ApiV1BinaryObjectsUploadPostWithHttpInfo(organizationId, apiComponent);
//        }

//        /// <summary>
//        /// Uploads/Adds a Binary Object 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="organizationId"> (optional)</param>
//        /// <param name="apiComponent"> (optional)</param>
//        /// <returns>ApiResponse of Object(void)</returns>
//        public ApiResponse<Object> ApiV1BinaryObjectsUploadPostWithHttpInfo (string organizationId = null, string apiComponent = null)
//        {

//            var localVarPath = "/api/v1/BinaryObjects/upload";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//                "multipart/form-data"
//            };
//            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (organizationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter
//            if (apiComponent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiComponent", apiComponent)); // query parameter
//            if (contentType != null) localVarFormParams.Add("ContentType", this.Configuration.ApiClient.ParameterToString(contentType)); // form parameter
//            if (contentDisposition != null) localVarFormParams.Add("ContentDisposition", this.Configuration.ApiClient.ParameterToString(contentDisposition)); // form parameter
//            if (headers != null) localVarFormParams.Add("Headers", this.Configuration.ApiClient.ParameterToString(headers)); // form parameter
//            if (length != null) localVarFormParams.Add("Length", this.Configuration.ApiClient.ParameterToString(length)); // form parameter
//            if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
//            if (fileName != null) localVarFormParams.Add("FileName", this.Configuration.ApiClient.ParameterToString(fileName)); // form parameter

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
//                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("ApiV1BinaryObjectsUploadPost", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<Object>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
//                null);
//        }

//        /// <summary>
//        /// Uploads/Adds a Binary Object 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="organizationId"> (optional)</param>
//        /// <param name="apiComponent"> (optional)</param>
//        /// <returns>Task of void</returns>
//        public async System.Threading.Tasks.Task ApiV1BinaryObjectsUploadPostAsync (string organizationId = null, string apiComponent = null)
//        {
//             await ApiV1BinaryObjectsUploadPostAsyncWithHttpInfo(organizationId, apiComponent);

//        }

//        /// <summary>
//        /// Uploads/Adds a Binary Object 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="organizationId"> (optional)</param>
//        /// <param name="apiComponent"> (optional)</param>
//        /// <returns>Task of ApiResponse</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1BinaryObjectsUploadPostAsyncWithHttpInfo (string organizationId = null, string apiComponent = null)
//        {

//            var localVarPath = "/api/v1/BinaryObjects/upload";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//                "multipart/form-data"
//            };
//            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (organizationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "organizationId", organizationId)); // query parameter
//            if (apiComponent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiComponent", apiComponent)); // query parameter
//            if (contentType != null) localVarFormParams.Add("ContentType", this.Configuration.ApiClient.ParameterToString(contentType)); // form parameter
//            if (contentDisposition != null) localVarFormParams.Add("ContentDisposition", this.Configuration.ApiClient.ParameterToString(contentDisposition)); // form parameter
//            if (headers != null) localVarFormParams.Add("Headers", this.Configuration.ApiClient.ParameterToString(headers)); // form parameter
//            if (length != null) localVarFormParams.Add("Length", this.Configuration.ApiClient.ParameterToString(length)); // form parameter
//            if (name != null) localVarFormParams.Add("Name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
//            if (fileName != null) localVarFormParams.Add("FileName", this.Configuration.ApiClient.ParameterToString(fileName)); // form parameter

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("ApiV1BinaryObjectsUploadPost", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<Object>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
//                null);
//        }

//        /// <summary>
//        /// Provides an BinaryObject details for a particular BinaryObject Id. 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">BinaryObject id</param>
//        /// <returns>BinaryObjectPaginatedList</returns>
//        public BinaryObjectPaginatedList GetBinaryObject (string id)
//        {
//             ApiResponse<BinaryObjectPaginatedList> localVarResponse = GetBinaryObjectWithHttpInfo(id);
//             return localVarResponse.Data;
//        }

//        /// <summary>
//        /// Provides an BinaryObject details for a particular BinaryObject Id. 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">BinaryObject id</param>
//        /// <returns>ApiResponse of BinaryObjectPaginatedList</returns>
//        public ApiResponse< BinaryObjectPaginatedList > GetBinaryObjectWithHttpInfo (string id)
//        {
//            // verify the required parameter 'id' is set
//            if (id == null)
//                throw new ApiException(400, "Missing required parameter 'id' when calling BinaryObjectsApi->GetBinaryObject");

//            var localVarPath = "/api/v1/BinaryObjects/{id}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetBinaryObject", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<BinaryObjectPaginatedList>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
//                (BinaryObjectPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinaryObjectPaginatedList)));
//        }

//        /// <summary>
//        /// Provides an BinaryObject details for a particular BinaryObject Id. 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">BinaryObject id</param>
//        /// <returns>Task of BinaryObjectPaginatedList</returns>
//        public async System.Threading.Tasks.Task<BinaryObjectPaginatedList> GetBinaryObjectAsync (string id)
//        {
//             ApiResponse<BinaryObjectPaginatedList> localVarResponse = await GetBinaryObjectAsyncWithHttpInfo(id);
//             return localVarResponse.Data;

//        }

//        /// <summary>
//        /// Provides an BinaryObject details for a particular BinaryObject Id. 
//        /// </summary>
//        /// <exception cref="OpenBots.Service.API.Client.ApiException">Thrown when fails to make API call</exception>
//        /// <param name="id">BinaryObject id</param>
//        /// <returns>Task of ApiResponse (BinaryObjectPaginatedList)</returns>
//        public async System.Threading.Tasks.Task<ApiResponse<BinaryObjectPaginatedList>> GetBinaryObjectAsyncWithHttpInfo (string id)
//        {
//            // verify the required parameter 'id' is set
//            if (id == null)
//                throw new ApiException(400, "Missing required parameter 'id' when calling BinaryObjectsApi->GetBinaryObject");

//            var localVarPath = "/api/v1/BinaryObjects/{id}";
//            var localVarPathParams = new Dictionary<String, String>();
//            var localVarQueryParams = new List<KeyValuePair<String, String>>();
//            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
//            var localVarFormParams = new Dictionary<String, String>();
//            var localVarFileParams = new Dictionary<String, FileParameter>();
//            Object localVarPostBody = null;

//            // to determine the Content-Type header
//            String[] localVarHttpContentTypes = new String[] {
//            };
//            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

//            // to determine the Accept header
//            String[] localVarHttpHeaderAccepts = new String[] {
//                "application/json"
//            };
//            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
//            if (localVarHttpHeaderAccept != null)
//                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

//            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

//            // make the HTTP request
//            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
//                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
//                localVarPathParams, localVarHttpContentType);

//            int localVarStatusCode = (int) localVarResponse.StatusCode;

//            if (ExceptionFactory != null)
//            {
//                Exception exception = ExceptionFactory("GetBinaryObject", localVarResponse);
//                if (exception != null) throw exception;
//            }

//            return new ApiResponse<BinaryObjectPaginatedList>(localVarStatusCode,
//                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
//                (BinaryObjectPaginatedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BinaryObjectPaginatedList)));
//        }

//    }
//}
